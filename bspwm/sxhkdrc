## wm independent hotkeys
#

# term/floating term
control + {shift +,_} Return
	alacritty {_,--class alacritty\,terminal}

# rofi
control + space
	rofi -show run -lines 5

# reload sxhkd conf
super + Escape
	pkill -USR1 -x sxhkd

# emojis
{super + space,control + shift + alt + mod4 + space}
	~/dotfiles/scripts/emoji.sh {_,_}

## media and backlights
#

# ++, --, mute sound
@{XF86AudioRaiseVolume,XF86AudioLowerVolume,XF86AudioMute}
	~/dotfiles/scripts/volume.sh {_,-5,toggle}

# ++, -- volume with 1% scale
shift + @{XF86AudioRaiseVolume,XF86AudioLowerVolume}
	~/dotfiles/scripts/volume.sh {+1,-1}

# screen bl
@{XF86MonBrightnessUp,XF86MonBrightnessDown} {+ shift,_}
	~/dotfiles/scripts/backlight.sh -n -l {--inc,--dec} {1,1%}

# kb, monitor bl
{shift +,_} @{XF86KbdBrightnessUp,XF86KbdBrightnessDown}
	~/dotfiles/scripts/backlight.sh -n {-m,-k} {--inc,--dec} 5

# play, next, prev
@{XF86AudioPlay,XF86AudioNext,XF86AudioPrev}
	playerctl {play-pause,next,previous}

# screenshot window
{F3,shift + F3, @XF86LaunchA}
	~/dotfiles/scripts/screenshot.sh {-w,-a,-s}

# launch menu
XF86Tools
	~/dotfiles/scripts/menu.sh

# reload keyboard config
{_,shift +} XF86Calculator
	~/dotfiles/scripts/kb.sh {-e,-m}

## bspwm hotkeys
#

# quit/restart bspwm
super + shift + {q,r}
	bspc {quit,wm -r}

# close/kill windows
control + {shift + q,q}
	bspc node -{k,c}

# toggle fullscreen
alt + Tab
	if [[ -z `bspc query -N -n focused.fullscreen` ]];\
	then :;                                           \
	bspc node focused.floating -g marked=on;          \
	bspc node focused.tiled -g marked=off;            \
	bspc node focused -t fullscreen;                  \
	else :;                                           \
	bspc node focused.marked -t floating;             \
	bspc node focused.\!marked -t tiled;              \
	fi;

# switch workspaces on current monitor
alt + {1-9,0}
	[[ "$(bspc query -M -m .focused --names)" == HDMI-1 \
	&& "$(bspc query -M | wc -l)" > 1 ]]                \
	&& SHIFT=10 || SHIFT=0;                             \
	TARGET=$(($SHIFT+{1-9,10}));                        \
	bspc desktop -f ^$TARGET

# move win to current monitor
ctrl + shift + {1-9,0}
	[[ "$(bspc query -M -m .focused --names)" == HDMI-1 \
	&& "$(bspc query -M | wc -l)" > 1 ]] &&             \
	_PREF=1 || _PREF="";                                \
	bspc node -d ^$\{_PREF\}{1-9,0}

# move win to the current desktop of the next monitor
control + shift + alt + mod4 + space + m
	bspc node -m next

# move win to the corresponding workspace of the next monitor
control + shift + alt + mod4 + space + n
	[[ "$(bspc query -M -m .focused --names)" == HDMI-1 ]] \
	&& SHIFT=0 || SHIFT=10;                                \
	[[ "$(bspc query -M | wc -l)" > 1 ]] || SHIFT=0;       \
	CURRENT=$(bspc query -D -m -n --names);                \
	TARGET=$(($SHIFT+$\{CURRENT: -1\}));                   \
	bspc node -d ^$TARGET

# move win to the next monitor (follow or not)
super + c
	bspc node -m next

# next/prev workspace on focused monitor
ctrl {_,+ shift} + Tab
	bspc desktop -f {next,prev}.occupied.local

# next/prev workspace on unfocused monitor
super {_,+ shift} + Tab
	dir={next,prev};                            \
	bspc monitor -f next;                       \
	bspc desktop -f $dir.occupied.local;        \
	bspc monitor -f last

# focus in the given direction
alt + {h,j,k,l}
	bspc node -f {west,south,north,east}

# toggle floating
ctrl + shift + space
	[[ -z `bspc query -N -n focused.floating` ]]\
	&& bspc node focused -t floating            \
	|| bspc node focused -t tiled

# grow a win
ctrl + alt + {Left,Down,Up,Right}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# shrink a win
ctrl + alt + shift + {Right,Up,Down,Left}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# swap win
ctrl + shift + {Left,Down,Up,Right}
	bspc node -s {west,south,north,east}

# outter gaps
super + shift + {equal,minus}
	cur=$(bspc config -d focused left_padding); \
	((cur{++,--}));                             \
	((cur=cur<0?0:cur));                        \
	bspc config -d focused top_padding $cur ;   \
	bspc config -d focused bottom_padding $cur; \
	bspc config -d focused left_padding $cur ;  \
	bspc config -d focused right_padding $cur

# left right outter gaps
super + {Left,Right}
	cur=$(bspc config -d focused left_padding); \
	((cur{++,--}));                             \
	((cur=cur<0?0:cur));                        \
	bspc config -d focused left_padding $cur ;  \
	bspc config -d focused right_padding $cur

# top bottom outter gaps
super + {Up,Down}
	cur=$(bspc config -d focused top_padding); \
	((cur{++,--}));                             \
	((cur=cur<0?0:cur));                        \
	bspc config -d focused top_padding $cur ;   \
	bspc config -d focused bottom_padding $cur

# borders
super + {equal,minus}
	cur=$(bspc config -d focused window_gap);   \
	((cur{++,--}));                             \
	((cur=cur<0?0:cur));                        \
	bspc config -d focused window_gap $cur

# parent rotation
super + x
	bspc node @parent -R 90

# whole tree rotation
super + {a,d}
	bspc node @/ -C {forward,backward}

# whole tree symmetry
super + {w,s}
	bspc node @/ -F {vertical,horizontal}

# toggle polybar
super + z
	polybar-msg cmd toggle;                     \
	if [[ $(bspc config top_padding) != 0 ]];   \
	then bspc config top_padding 0;             \
	else bspc config top_padding 35;            \
	fi

# quick resize
super + shift + {1-5}
	pkill resize.sh ; ~/dotfiles/scripts/resize.sh {0-4}

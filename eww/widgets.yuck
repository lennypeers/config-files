(include "/home/lenny/.config/eww/var.yuck")

(defwidget previous []
  (box :class "media_button"
    (but
      :left "playerctl previous"
      :icon "玲")))

(defwidget next []
  (box :class "media_button"
    (but
      :left "playerctl next"
      :icon "怜")))

(defwidget pause []
  (box :class "media_button"
    (but
      :left "playerctl play-pause"
      :icon player_icon)))

(defwidget media_buttons []
  (box
    :class "media_buttons_wrapper"
    :orientation "h"
    :halign "center"
    :spacing spacing
    (previous)
    (pause)
    (next)))

(defwidget player []
  (box
    :class "player_wrapper"
    :orientation "h"
    (box
      :orientation "v"
      :space-evenly false
      :valign "center"
      :halign "center"
      :spacing 15
    (button
      :onclick "~/.config/eww/scripts/open_spotify"
      (image
        :class "cover_image"
        :path cover_path
        :image-width 175
        :image-height 175))
    (label
      :limit-width 27
      :wrap false
      :show_truncated true
      :text "${current_song}${dummy_var_player}")
    (media_buttons))))

(defwidget date []
  (box
    :class "date_wrapper"
    (box
      :orientation "h"
      :space-evenly false
      :halign "center"
      :valign "center"
      :spacing 40
      (box
        :class "date_sec"
        :space-evenly false
        :orientation "v"
        :valign "center"
        :halign "center"
        (label
          :class "day_number"
          :text date_D)
        (label
          :class "month"
          :text date_M))
      (label
        :class "day_name"
        :text date_d))))

(defwidget time []
  (box
    :class "time_wrapper"
    (box
      :orientation "h"
      :spacing spacing
      :halign "center"
      (label
        :class "hour"
        :text date_h)
      (label
        :class "minute"
        :text date_m)
      (label
        :class "second"
        :text date_s)
      (label
        :class "meridian"
        :text date_p))))

(defwidget but [icon left ?right ?middle]
  (button
    :class "button"
    :onclick left
    :onmiddleclick middle
    :onrightclick right
    icon))

(defwidget theme_button []
  (box
    :class "control_button"
    (but
      :left "~/dotfiles/scripts/color >/dev/null"
      :icon {theme == "day" ? "" : ""})))

(defwidget weather []
  (box
    :class "weather_wrapper"
    (box
      :orientation "v"
      :halign "center"
      :valign "center"
      :space-evenly false
      :spacing spacing
      (box
        :orientation "h"
        :space-evenly true
        :valign "center"
        :halign "center"
        :spacing spacing
        (label
          :class "weather_logo"
          :text weather_logo)
        (box
          :orientation "h"
          :space-evenly false
          :halign "center"
          :spacing spacing
          (label
            :class "weather_temp"
            :text weather_temperature)
          (label
            :class "weather_celsius"
            :text "°C ${dummy_var_weather}")))
      (label
        :class "weather_cond"
        :limit-width 27
        :wrap false
        :show_truncated true
        :text weather_condition))))

(defwidget panel []
  (box
    :class theme
    :orientation "v"
    :halign "center"
    :valign "center"
    :space-evenly false
    (eventbox
      :onhoverlost "eww close-all"
      (box
        :spacing spacing
        :orientation "v"
        :space-evenly false
        (time)
        (player)
        (box
          :spacing spacing
          :orientation "v"
          :space-evenly true
          (date)
          (weather))
        (box
          :orientation "v"
          :space-evenly false
          :spacing 0
          (control)
          (monitors)
          (power))))))

(defwidget control []
  (revealer
    :transition "slideup"
    :reveal control_shown
    (box
      :spacing spacing
      (theme_button)
      (power_button)
      (monitors_button))))

(defwidget monitors_button []
    (eventbox
      :onhover "eww update control_shown=false monitors_child_shown=true power_child_shown=false"
      (box
        :class "control_button"
        (label
          :text "类"))))

(defwidget monitors []
  (revealer
    :transition "slideup"
    :reveal monitors_child_shown
    (eventbox
      :onhoverlost "eww update control_shown=true monitors_child_shown=false power_child_shown=false"
      (box
        :class theme
        :spacing spacing
        (laptop)
        (dock)
        (multi)))))

(defwidget laptop []
  (box
    :class "control_button"
    (but
      :left "~/dotfiles/scripts/monitors -l; ~/dotfiles/scripts/keyboard -m; eww close-all"
      :icon "")))

(defwidget dock []
  (box
    :class "control_button"
    (but
      :left "~/dotfiles/scripts/monitors -d; ~/dotfiles/scripts/keyboard -e; eww close-all"
      :icon "")))

(defwidget multi []
  (box
    :class "control_button"
    (but
      :left "~/dotfiles/scripts/monitors -m; ~/dotfiles/scripts/keyboard -e; eww close-all"
      :icon "")))

(defwidget power_button []
  (eventbox
    :onhover "eww update control_shown=false power_child_shown=true monitors_child_shown=false"
    (box
      :class "control_button"
      (label
        :text "漣"))))

(defwidget power []
  (revealer
    :transition "slideup"
    :reveal power_child_shown
    (eventbox
      :onhoverlost "eww update control_shown=true power_child_shown=false monitors_child_shown=false"
      (box
        :class theme
        :spacing spacing
        (suspend)
        (shutdown)
        (reboot)))))

(defwidget suspend []
  (box
    :class "control_button"
    (but
      :left "/home/lenny/.config/eww/scripts/suspend"
      :right "systemctl suspend >/dev/null"
      :icon "鈴")))

(defwidget shutdown []
  (box
    :class "control_button"
    (but
      :left "shutdown now"
      :icon "襤")))

(defwidget reboot []
  (box
    :class "control_button"
    (but
      :left "reboot"
      :icon "ﯩ")))

(defwidget lock [monitor]
  (box
    :class theme
    (box
      :orientation "h"
      :space-evenly false
      :spacing spacing
      (time)
      (box
        :class "control_button"
        (box
          :class "lock_button"
          (but
            :left "true"
            :icon ""))))))

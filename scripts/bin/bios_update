#!/usr/bin/env python3

"""Bios update fetch automation for the dell inspiron/vostro 5415."""

import hashlib
import json
import subprocess
import sys

import requests
from bs4 import BeautifulSoup as BS


DEBUG = False
TIMEOUT = 10  # seconds
URL = (
    "https://www.dell.com"
    + "/support/driver/fr-fr/ips/api/driverlist/fetchdriversbyproduct"
)
TARGET = "inspiron-14-5415-laptop"
PAYLOAD = {
    "productcode": TARGET,
    "oscode": "BIOSA",
    "lob": "Inspiron",
}
HEADERS = {
    "Sec-Ch-Ua": '"Chromium";v="103", ".Not/A)Brand";v="99"',
    "Accept": "application/json, text/javascript, */*; q=0.01",
    "X-Requested-With": "XMLHttpRequest",
    "Sec-Ch-Ua-Mobile": "?0",
    "User-Agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/103.0.5060.134 Safari/537.36"
    ),
    "Gbpageinfo": (
        "url=https://www.dell.com/support/home/fr-fr/product-support/product/"
        f"{TARGET}/drivers"
    ),
    "Sec-Ch-Ua-Platform": '"Linux"',
    "Sec-Fetch-Site": "same-origin",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Dest": "empty",
    "Referer": (
        "https://www.dell.com/support/home/fr-fr/product-support/product/"
        f"{TARGET}/drivers;"
    ),
    "Accept-Encoding": "gzip, deflate",
    "Accept-Language": "en-US,en;q=0.9",
}


def get_checksums(driver: str) -> list[str]:
    """Fetch checksums of the latest update."""
    payload = {
        "driverid": driver.lower(),
        "oscod": "biosa",
        "productcode": TARGET,
    }
    url = "https://www.dell.com/support/home/fr-fr/drivers/driversdetails"
    res = requests.get(url, params=payload, headers=HEADERS, timeout=TIMEOUT)
    soup = BS(res.text, features="lxml")
    return [
        sum_.text
        for sum_ in soup.find_all("div", class_="col-md-10")
        if len(sum_.text) == 64
    ]


def get_info() -> dict:
    """Get main infos about the bios."""
    res = requests.get(URL, params=PAYLOAD, headers=HEADERS, timeout=TIMEOUT)
    json_res = json.loads(res.text)

    drivers = json_res["DriverListData"]
    # Fetching the bios update
    for driver in drivers:
        if driver["Type"] == "BIOS":
            # Cleaning up the dict
            to_del = [
                "AppOses",
                "AppLanguages",
                "Cat",
                "CatName",
                "IsOthVersExst",
                "OtherVersions",
                "Successor",
                "DownloadType",
                "AccessLevel",
            ]
            for key in to_del:
                if key in driver:
                    del driver[key]
            return driver
    raise Exception("No driver found")


def download() -> None:
    """Download the bios update."""
    infos = get_info()
    filename = infos["FileFrmtInfo"]["FileName"]
    location = infos["FileFrmtInfo"]["HttpFileLocation"]
    driver = infos["DriverId"]
    target = filename

    print("Downloading updates...")
    data = requests.get(location, timeout=TIMEOUT)

    # Writing file
    with open(target, "wb") as file:
        file.write(data.content)
    print(f"Update downloaded as {target}")

    # Checking sums
    hash_ = hashlib.sha256(data.content).hexdigest()
    sums = get_checksums(driver)
    print(f"Provided sums: {sums},\n", f"Update sha256 sum: {hash_}", sep="\n")
    assert hash_ in sums, "Sum mismatch"


def info() -> None:
    """Fetch bios update infos."""
    infos = get_info()
    upstream_version = infos["DellVer"]

    # Fetching installed version
    with subprocess.Popen(
        ["cat", "/sys/devices/virtual/dmi/id/product_version"], stdout=subprocess.PIPE
    ) as proc:
        if proc.stdout is not None:
            bios_version = proc.stdout.readline().decode("utf-8").strip()
        else:
            bios_version = "Unknown"

    # Printing infos
    print(
        f"Remote infos: {json.dumps(infos, indent=2)} \n",
        f"Current bios version: {bios_version}",
        f"Upstream bios version: {upstream_version}",
        sep="\n",
    )

    # Tell if an update is available
    available_versions = upstream_version.split(", ")
    if bios_version not in available_versions:
        print("Current version is not matching with the latest upstream version.")


def usage(out=sys.stdout) -> None:
    """Print help message."""
    message = """
usage: bios_update [command]
with command in:"
 -d, --download    download the latest update
 -h, --help        show this message
 -i, --info        fetch update
"""
    print(message, file=out)


def main() -> None:
    """Entry of the tool."""
    argc = len(sys.argv)
    if argc > 2:
        usage(sys.stderr)
        sys.exit(254)
    if argc == 1 or sys.argv[1] in ["-i", "--info"]:
        info()
    elif sys.argv[1] in ["-h", "--help"]:
        usage()
    elif sys.argv[1] in ["-d", "--download"]:
        download()
    else:
        usage(sys.stderr)
        sys.exit(255)


if __name__ == "__main__":
    main()

# vim: set ts=4 sts=4 sw=4 et :
